-- The Nobench snippet based on http://pages.cs.wisc.edu/~chasseur/pubs/argo-long.pdf

create table bench10(js json);

copy 10 records into bench10 from E'$QTSTSRCDIR/data';

select count(*) from bench10;
--Q1:
 -- MongoDB:
--    db["nobench_main"].find({}, ["str1", "num"])
--  Argo/SQL:
--    SELECT str1, num FROM nobench_main;
select json.filter(js, '$..str1,$..num') from bench10;

-- Q2
--  MongoDB:
--    db["nobench_main"].find({}, ["nested_obj.str", "nested_obj.num"])
--  Argo/SQL
--    SELECT nested_obj.str, nested_obj.num FROM nobench_main;
select json.filter(js,'.nested_obj.str,.nested_obj.num') from bench10;

-- Q3(replace XX with literal digits):
--  MongoDB:
--    db["nobench_main"].find(
--        { "$or" : [ { "sparse_XX0" : {"$exists" : True} },
--                    { "sparse_XX9" : {"$exists" : True} } ] },
--        ["sparse_XX0", "sparse_XX9"])
--  Argo/SQL:
--    SELECT sparse_XX0, sparse_XX9 FROM nobench_main;
select json.filter(js,'..sparse_000,..sparse_001') from bench10;

--Q4 (replace XX and YY with different literal digits):
--  MongoDB:
--    db["nobench_main"].find(
--        { "$or" : [ { "sparse_XX0" : {"$exists" : True} },
--                    { "sparse_YY0" : {"$exists" : True} } ] },
--        ["sparse_XX0", "sparse_YY0"])
--  Argo/SQL:
--    SELECT sparse_XX0, sparse_YY0 FROM nobench_main;
select json.filter(js,'..sparse_000,..sparse_110') from bench10;

--Q5 (replace XXXXX with a literal string):
--  MongoDB:
--    db["nobench_main"].find({ "str1" : XXXXX })
--  Argo/SQL:
--    SELECT * FROM nobench_main WHERE str1 = XXXXX;
select json.filter(js,'str1') from bench10;
select json.text(json.filter(js,'str1')) from bench10;
select * from bench10 where json.text(json.filter(js,'str1')) = 'GBRDCMBR';

--Q6 (replace XXXXX and YYYYY with literal integers):
--  MongoDB:
--    db["nobench_main"].find({ "$and": [{ "num" : {"$gte" : XXXXX } },
--                                       { "num" : {"$lt"  : YYYYY } }]})
--  Argo/SQL:
--    SELECT * FROM nobench_main WHERE num BETWEEN XXXXX AND YYYYY;
select json.number(json.filter(js,'num')) from bench10;
select json."integer"(json.filter(js,'num')) from bench10;
select cast(json.text(json.filter(js,'num')) as integer) from bench10;
select * from bench10 where json.number(json.filter(js,'num')) between 0.0 and 3.0;

--Q7 (replace XXXXX and YYYYY with literal integers):
--  MongoDB:
--    db["nobench_main"].find({ "$and": [{ "dyn1" : {"$gte" : XXXXX } },
--                                       { "dyn1" : {"$lt"  : YYYYY } }]})
--  Argo/SQL:
--    SELECT * FROM nobench_main WHERE dyn1 BETWEEN XXXXX AND YYYYY;
select json.number(json.filter(js,'dyn1')) from bench10;
select json."integer"(json.filter(js,'dyn1')) from bench10;
select cast(json.text(json.filter(js,'dyn1')) as integer) from bench10;
select * from bench10 where json.number(json.filter(js,'dyn1')) between 0.0 and 3.0;

-- Q8 (replace XXXXX with one of the "suggested" words from data generation):
--   MongoDB:
--     db["nobench_main"].find({ "nested_arr" : XXXXX })
--   Argo/SQL:
--     SELECT * FROM nobench_main WHERE XXXXX = ANY nested_arr;
select json.filter(js,'nested_arr') from bench10;
select * from bench10 where json.text(json.filter(js,'nested_arr')) = 'check it the';

-- Q9 (replace XXX with literal digits and YYYYY with a literal string):
--   MongoDB:
--     db["nobench_main"].find({ "sparse_XXX" : YYYYY })
--   Argo/SQL:
--     SELECT * FROM nobench_main WHERE sparse_XXX = YYYYY;
select * from bench10 where json.text(json.filter(js,'sparse_000')) = 'GBRDA===';

-- Q10 (replace XXXXX and YYYYY with literal integers):
--   MongoDB:
--     db["nobench_main"].group(
--         {"thousandth" : True},
--         {"$and": [{"num" : { "$gte" : XXXXX } },
--                   {"num" : { "$lt"  : YYYYY } }]},
--         { "total" : 0 },
--         "function(obj, prev) { prev.total += 1; }")
--   Argo/SQL:
--     SELECT COUNT(*) FROM nobench_main WHERE num BETWEEN XXXXX AND YYYYY GROUP BY thousandth;
select f.h, count(*) from (
	select json.filter(js,'..thousandth') as g, json.number(json.filter(js,'num')) as h from bench10 where json.number(json.filter(js,'num')) between 0.0 and 3.0 ) as f
group by f.h;

-- Q11 (replace XXXXX and YYYYY with literal integers):
--   MongoDB:
--     Implemented as Javascript MapReduce job.
--   Argo/SQL:
--     SELECT * FROM nobench_main AS left
--                   INNER JOIN nobench_main AS right
--                   ON (left.nested_obj.str = right.str1)
--                   WHERE left.num BETWEEN XXXXX AND YYYYY;
select * from bench10 as "left" inner join bench10 as "right" on (json.filter("left".js,'nested_obj.str') = json.filter("right".js, 'str1'))
 where json.number(json.filter("left".js,'num')) between 0.0 and 3.0 order by "left".js;

-- Q12 (use "extra" data file provided by generator):
--   MongoDB:
--     Use mongoimport command-line tool.
--   PostgreSQL:
--     COPY table FROM file;
--   MySQL:
--     LOAD DATA LOCAL INFILE file REPLACE INTO TABLE table;
-- copy into bench10 from 'datafile'.

drop table bench10;

stdout of test 'mergedb_create` in directory 'sql/test/mergetables` itself:


# 23:53:18 >  
# 23:53:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=36041" "--set" "mapi_usock=/var/tmp/mtest-11852/.s.monetdb.36041" "--set" "monet_prompt=" "--forcemito" "--dbpath=/home/niels/scratch/rc-monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_mergetables"
# 23:53:18 >  

# MonetDB 5 server v11.27.6
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 7.330 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2017 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:36041/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11852/.s.monetdb.36041
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 23:53:18 >  
# 23:53:18 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11852" "--port=36041"
# 23:53:18 >  

#CREATE TABLE R1 ( x integer primary key, y integer, z string);
#COPY 4 RECORDS INTO R1 FROM stdin USING DELIMITERS ' ','\n';
#0 0 hello
#1 0 hello
#2 1 world 
#3 1 world 
[ 4	]
#CREATE TABLE R2 ( x integer primary key, y integer, z string);
#COPY 4 RECORDS INTO R2 FROM stdin USING DELIMITERS ' ','\n';
#5 0 hello
#6 0 hello
#7 1 world 
#8 1 world 
[ 4	]
#CREATE TABLE R3 ( x integer primary key, y integer, z string);
#COPY 4 RECORDS INTO R3 FROM stdin USING DELIMITERS ' ','\n';
#10 0 hello
#11 0 hello
#12 1 world 
#13 1 world 
[ 4	]
#CREATE MERGE TABLE R ( x integer primary key, y integer, z string);
#ALTER TABLE R ADD TABLE R1;
#ALTER TABLE R ADD TABLE R2;
#ALTER TABLE R ADD TABLE R3;
#SELECT * FROM R;
% .r,	.r,	.r # table_name
% x,	y,	z # name
% int,	int,	clob # type
% 2,	1,	5 # length
[ 0,	0,	"hello"	]
[ 1,	0,	"hello"	]
[ 2,	1,	"world"	]
[ 3,	1,	"world"	]
[ 5,	0,	"hello"	]
[ 6,	0,	"hello"	]
[ 7,	1,	"world"	]
[ 8,	1,	"world"	]
[ 10,	0,	"hello"	]
[ 11,	0,	"hello"	]
[ 12,	1,	"world"	]
[ 13,	1,	"world"	]
#CREATE TABLE S1 ( x integer primary key, y integer, z string);
#COPY 7 RECORDS INTO S1 FROM stdin USING DELIMITERS ' ','\n';
#0 0 hello
#1 0 hello
#2 1 world 
#3 1 world 
#4 1 bye 
#5 0 hello
#6 0 hello
[ 7	]
#CREATE TABLE S2 ( x integer primary key, y integer, z string);
#COPY 7 RECORDS INTO S2 FROM stdin USING DELIMITERS ' ','\n';
#7 1 world 
#8 1 world 
#9 1 bye 
#10 0 hello
#11 0 hello
#12 1 world 
#13 1 world 
[ 7	]
#CREATE MERGE TABLE S ( x integer primary key, y integer, z string);
#ALTER TABLE S ADD TABLE S1;
#ALTER TABLE S ADD TABLE S2;
#SELECT * FROM S;
% .s,	.s,	.s # table_name
% x,	y,	z # name
% int,	int,	clob # type
% 2,	1,	5 # length
[ 0,	0,	"hello"	]
[ 1,	0,	"hello"	]
[ 2,	1,	"world"	]
[ 3,	1,	"world"	]
[ 4,	1,	"bye"	]
[ 5,	0,	"hello"	]
[ 6,	0,	"hello"	]
[ 7,	1,	"world"	]
[ 8,	1,	"world"	]
[ 9,	1,	"bye"	]
[ 10,	0,	"hello"	]
[ 11,	0,	"hello"	]
[ 12,	1,	"world"	]
[ 13,	1,	"world"	]
#select
#  ref_2.y as c0,
#  cast(coalesce(ref_2.z,
#    ref_2.z) as clob) as c1,
#  ref_2.z as c2,
#  case when ref_2.y is NULL then subq_0.c0 else subq_0.c0 end
#     as c3,
#  ref_2.y as c4,
#  cast(coalesce(subq_0.c0,
#    ref_2.z) as clob) as c5,
#  ref_2.x as c6
#from
#  sys.r2 as ref_2,
#  lateral (select
#        ref_2.z as c0
#      from
#        sys.netcdf_vardim as ref_3
#      where ref_3.dim_id is NULL) as subq_0
#where EXISTS (
#  select
#      case when false then ref_9.z else ref_9.z end
#         as c0,
#      subq_2.c5 as c1,
% sys.,	.,	sys.,	.,	sys.,	.,	sys. # table_name
% c0,	c1,	c2,	c3,	c4,	c5,	c6 # name
% int,	clob,	clob,	clob,	int,	clob,	int # type
% 1,	0,	0,	0,	1,	0,	1 # length
#select
#  cast(coalesce(cast(coalesce(subq_0.c0,
#      subq_0.c0) as clob),
#    subq_0.c0) as clob) as c0,
#  subq_0.c3 as c1,
#  subq_0.c1 as c2,
#  subq_0.c2 as c3,
#  subq_0.c1 as c4,
#  subq_0.c2 as c5,
#  subq_0.c1 as c6,
#  subq_0.c2 as c7,
#  subq_0.c0 as c8,
#  subq_0.c2 as c9,
#  subq_0.c3 as c10
#from
#  (select
#        ref_0.z as c0,
#        ref_0.x as c1,
#        case when false then ref_0.x else ref_0.x end
#           as c2,
#        case when EXISTS (
#            select
#                ref_0.x as c0,
#                ref_1.type as c1,
% .,	.,	.,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% c0,	c1,	c2,	c3,	c4,	c5,	c6,	c7,	c8,	c9,	c10 # name
% clob,	int,	int,	int,	int,	int,	int,	int,	clob,	int,	int # type
% 0,	1,	1,	1,	1,	1,	1,	1,	0,	1,	1 # length
#select  
#  cast(nullif(subq_0.c3,
#    subq_0.c3) as int) as c0
#from 
#  (select  
#        ref_0.x as c0, 
#        ref_0.y as c1, 
#        ref_0.z as c2, 
#        ref_0.x as c3, 
#        ref_0.y as c4
#      from 
#        sys.s2 as ref_0
#      where (ref_0.z is NULL) 
#        and (EXISTS (
#          select  
#              ref_1.role_id as c0, 
#              ref_0.z as c1, 
#              ref_1.role_id as c2, 
#              ref_1.role_id as c3, 
#              ref_0.z as c4, 
#              ref_1.login_id as c5, 
% . # table_name
% c0 # name
% int # type
% 1 # length
#select  ref_0.x from sys.s2 as ref_0 
# where 	EXISTS (
#          select ref_1.role_id as c0 from sys.user_role as ref_1 
#	   where (EXISTS ( select ref_0.y as c0 from sys.netcdf_vars)) or (ref_0.y is NULL)
#	);
% sys.ref_0 # table_name
% x # name
% int # type
% 1 # length
#select
#  ref_11.access as c0,
#  ref_12.revsorted as c1
#from
#  sys._tables as ref_11
#    inner join sys.statistics as ref_12
#    on (((false)
#          or (ref_11.id is NULL))
#        or (EXISTS (
#          select
#              ref_13.dim_id as c0,
#              ref_11.query as c1
#            from
#              sys.netcdf_vardim as ref_13,
#              lateral (select
#                    ref_11.access as c0,
#                    ref_13.var_id as c1,
#                    ref_11.commit_action as c2,
#                    ref_11.system as c3
% .,	. # table_name
% c0,	c1 # name
% smallint,	boolean # type
% 1,	5 # length
#select
#   cast(coalesce(ref_8.name,
#     cast(nullif(ref_7.column,
#       cast(null as clob)) as clob)) as clob) as c0,
#   ref_10.function_id as c1,
#   cast(coalesce(ref_6.action,
#     ref_6.id) as int) as c2
#from
#   sys.types as ref_0
#     left join sys.netcdf_attrs as ref_1
#       inner join sys.keys as ref_6
#         inner join sys.storagemodelinput as ref_7
#             left join sys.optimizers as ref_8
#               inner join sys.users as ref_9
#                 right join sys.systemfunctions as ref_10
% .,	.,	. # table_name
% c0,	c1,	c2 # name
% clob,	int,	int # type
% 0,	1,	1 # length
#drop table R;
#drop table R1;
#drop table R2;
#drop table R3;
#drop table S;
#drop table S1;
#drop table S2;

# 23:53:19 >  
# 23:53:19 >  "Done."
# 23:53:19 >  


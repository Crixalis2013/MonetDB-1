stdout of test 'mergequery` in directory 'sql/test/mergetables` itself:


# 16:20:23 >  
# 16:20:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30678" "--set" "mapi_usock=/var/tmp/mtest-11019/.s.monetdb.30678" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_mergetables" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:20:23 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30678/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11019/.s.monetdb.30678
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 16:20:23 >  
# 16:20:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11019" "--port=30678"
# 16:20:23 >  

#CREATE TABLE part1 ( x double, y double, z double);
#COPY 4 RECORDS INTO part1 FROM stdin USING DELIMITERS ' ','\n';
#0.0 0.0 0.0
#1.0 0.0 0.0 
#0.0 1.0 0.0 
#1.0 1.0 0.0 
[ 4	]
#CREATE TABLE part2 ( x double, y double, z double);
#COPY 4 RECORDS INTO part2 FROM stdin USING DELIMITERS ' ','\n';
#2.0 0.0 0.0
#3.0 0.0 0.0 
#2.0 1.0 0.0 
#3.0 1.0 0.0 
[ 4	]
#CREATE MERGE TABLE complete ( x double, y double, z double);
#ALTER TABLE complete ADD TABLE part1;
#ALTER TABLE complete ADD TABLE part2;
#SELECT * FROM COMPLETE;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=0.0 AND x <=1.0;
% sys.complete,	sys.complete,	sys.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
#SELECT * FROM complete where x>=2.0 AND x <=3.0;
% sys.complete,	sys.complete,	sys.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#PLAN SELECT * FROM complete where x = 0.0; --only part1 passes
% .plan # table_name
% rel # name
% clob # type
% 78 # length
project (
| select (
| | table(sys.part1) [ "complete"."x", "complete"."y", "complete"."z" ] COUNT 
| ) [ "complete"."x" = double(53,1) "0" ]
) [ "complete"."x", "complete"."y", "complete"."z" ]
#SELECT * FROM complete where x = 0.0;
% sys.complete,	sys.complete,	sys.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 0,	1,	0	]
#PLAN SELECT * FROM complete where x = 3.0; --only part2 passes
% .plan # table_name
% rel # name
% clob # type
% 78 # length
project (
| select (
| | table(sys.part2) [ "complete"."x", "complete"."y", "complete"."z" ] COUNT 
| ) [ "complete"."x" = double(53,1) "3" ]
) [ "complete"."x", "complete"."y", "complete"."z" ]
#SELECT * FROM complete where x = 3.0;
% sys.complete,	sys.complete,	sys.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 3,	0,	0	]
[ 3,	1,	0	]
#PLAN SELECT * FROM complete where x >= 1.0 AND x < 2.0; --only part1 passes
% .plan # table_name
% rel # name
% clob # type
% 78 # length
project (
| select (
| | table(sys.part1) [ "complete"."x", "complete"."y", "complete"."z" ] COUNT 
| ) [ double(53,1) "1" <= "complete"."x" < double(53,1) "2" BETWEEN  ]
) [ "complete"."x", "complete"."y", "complete"."z" ]
#SELECT * FROM complete where x >= 1.0 AND x < 2.0;
% sys.complete,	sys.complete,	sys.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 1,	0,	0	]
[ 1,	1,	0	]
#PLAN SELECT * FROM complete where x > 1.0 AND x <= 2.0; --only part2 passes
% .plan # table_name
% rel # name
% clob # type
% 78 # length
project (
| select (
| | table(sys.part2) [ "complete"."x", "complete"."y", "complete"."z" ] COUNT 
| ) [ double(53,1) "1" < "complete"."x" <= double(53,1) "2" BETWEEN  ]
) [ "complete"."x", "complete"."y", "complete"."z" ]
#SELECT * FROM complete where x > 1.0 AND x <= 2.0;
% sys.complete,	sys.complete,	sys.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 2,	0,	0	]
[ 2,	1,	0	]
#PLAN SELECT * FROM complete where x > 1.0 AND x < 2.0; --no part passes
% .plan # table_name
% rel # name
% clob # type
% 103 # length
project (
| select (
| |  [ boolean "true" ]
| ) [ boolean "false" ]
) [ double "NULL" as "complete"."x", double "NULL" as "complete"."y", double "NULL" as "complete"."z" ]
#SELECT * FROM complete where x > 1.0 AND x < 2.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
#PLAN SELECT * FROM complete where x >= 1.0 AND x <= 2.0;
% .plan # table_name
% rel # name
% clob # type
% 125 # length
union (
| project (
| | select (
| | | table(sys.part1) [ "part1"."x" as "complete"."x", "part1"."y" as "complete"."y", "part1"."z" as "complete"."z" ] COUNT 
| | ) [ double(53,1) "1" <= "complete"."x" <= double(53,1) "2" BETWEEN  ]
| ) [ "complete"."x", "complete"."y", "complete"."z" ],
| project (
| | select (
| | | table(sys.part2) [ "part2"."x" as "complete"."x", "part2"."y" as "complete"."y", "part2"."z" as "complete"."z" ] COUNT 
| | ) [ double(53,1) "1" <= "complete"."x" <= double(53,1) "2" BETWEEN  ]
| ) [ "complete"."x", "complete"."y", "complete"."z" ]
) [ "complete"."x", "complete"."y", "complete"."z" ]
#SELECT * FROM complete where x >= 1.0 AND x <= 2.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 1,	0,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 2,	1,	0	]
#PLAN SELECT * FROM complete WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
% .plan # table_name
% rel # name
% clob # type
% 125 # length
union (
| project (
| | select (
| | | table(sys.part1) [ "part1"."x" as "complete"."x", "part1"."y" as "complete"."y", "part1"."z" as "complete"."z" ] COUNT 
| | ) [ double "0" <= "complete"."x" <= double "2" BETWEEN , double "0" <= "complete"."y" <= double "2" BETWEEN  ]
| ) [ "complete"."x", "complete"."y", "complete"."z" ],
| project (
| | select (
| | | table(sys.part2) [ "part2"."x" as "complete"."x", "part2"."y" as "complete"."y", "part2"."z" as "complete"."z" ] COUNT 
| | ) [ double "0" <= "complete"."x" <= double "2" BETWEEN , double "0" <= "complete"."y" <= double "2" BETWEEN  ]
| ) [ "complete"."x", "complete"."y", "complete"."z" ]
) [ "complete"."x", "complete"."y", "complete"."z" ]
#SELECT * FROM complete WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 2,	1,	0	]
#ROLLBACK;

# 16:20:24 >  
# 16:20:24 >  "Done."
# 16:20:24 >  

